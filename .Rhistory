cols = c(1,3,5:28)
dfName = c("ID", "pName", "Age", "tName", "G", "PA", "AB", "R", "H", "2B", "3B", "HR", "RBI", "SB", "CS", "BB", "SO", "BA", "OBP", "SLG", "OPS", "OPS+", "TB", "GDP", "HBP", "SH", "SF", "IBB", "Pos")
ec = 29
}
doc = htmlTreeParse(fileurl,useInternal = TRUE)
string = paste("//tr[@class='",xClass,"']",sep = "")
dat = xpathSApply(doc, string, xmlValue)
almost = matrix(nrow = length(dat), ncol = ec)
almost = sapply(1:length(dat), function(i){
a = dat[i]
a1 = gsub("\n","",a)
a2 = strsplit(a1,"   ")
if(length(a2[[1]]) == (ec-1)){
a2[[1]][ec] = NA
}
a2[[1]][which(a2[[1]] == "")] = NA
a2[[1]][2] = gsub("Â", "",a2[[1]][2])
almost[i,] <<- unlist(a2)
invisible(a2)
})
maybe = matrix(unlist(almost), nrow = length(almost),byrow = T)
what = as.data.frame(maybe)
step = sapply(what[,1:ncol(what)], as.character)
what[,cols] = sapply(step, as.numeric)
names(what) = dfName
options(warn = 0)
return(what)
}
first = getdat(xClass = "full_table",year,pitching, league)
head(first)
options(warn = -1)
if(pitching == T){
fileurl = paste("http://www.baseball-reference.com/leagues/",league, "/",year,"-standard-pitching.shtml",sep = "")
cols = c(1,3,5:35)
dfName = c("ID", "pName", "Age", "tName", "W", "L", "WL%", "ERA", "G", "GS", "GF", "CG", "SHO", "SV", "IP", "H", "R", "ER", "HR", "BB", "IBB", "SO", "HBP", "BK", "WP", "BF", "ERA+", "FIP", "WHIP", "H9", "HR9", "BB9", "SO9", "K/BB")
ec = 35
}
else{
fileurl = paste("http://www.baseball-reference.com/leagues/", league, "/",year,"-standard-batting.shtml",sep = "")
cols = c(1,3,5:28)
dfName = c("ID", "pName", "Age", "tName", "G", "PA", "AB", "R", "H", "2B", "3B", "HR", "RBI", "SB", "CS", "BB", "SO", "BA", "OBP", "SLG", "OPS", "OPS+", "TB", "GDP", "HBP", "SH", "SF", "IBB", "Pos")
ec = 29
}
doc = htmlTreeParse(fileurl,useInternal = TRUE)
string = paste("//tr[@class='",xClass,"']",sep = "")
dat = xpathSApply(doc, string, xmlValue)
fileurl = paste("http://www.baseball-reference.com/leagues/", league, "/",year,"-standard-batting.shtml",sep = "")
doc = htmlTreeParse(fileurl,useInternal = TRUE)
string = paste("//tr[@class='",xClass,"']",sep = "")
dat = xpathSApply(doc, string, xmlValue)
almost = matrix(nrow = length(dat), ncol = ec)
almost
almost = sapply(1:length(dat), function(i){
a = dat[i]
a1 = gsub("\n","",a)
a2 = strsplit(a1,"   ")
if(length(a2[[1]]) == (ec-1)){
a2[[1]][ec] = NA
}
a2[[1]][which(a2[[1]] == "")] = NA
a2[[1]][2] = gsub("Â", "",a2[[1]][2])
almost[i,] <<- unlist(a2)
invisible(a2)
})
almost
maybe = matrix(unlist(almost), nrow = length(almost),byrow = T)
what = as.data.frame(maybe)
maybe
what
head(what)
step = sapply(what[,1:ncol(what)], as.character)
what[,cols] = sapply(step, as.numeric)
head(what)
head(step)
step[,3]
as.numeric(step[,3])
cols
maybe = matrix(unlist(almost), nrow = length(almost),byrow = T)
what = as.data.frame(maybe)
as.character(what)
what = sapply(what[,1:ncol(what)], as.character)
what
what[,cols] = sapply(what[,cols], as.numeric)
what
sapply(what[,cols],as.numeric)
what[,cols] = sapply(what[,cols],as.numeric)
what
what = as.data.frame(what)
what
what[,1]
class(what[,1])
class(what[,2])
what[,1] = as.numeric(what[,1])
what[,1]
classes
classes = c(rep(c("Numeric", "Character"), 2), rep("Numeric",25))
out = sapply(1:ncol(what), function(i){
if(classes[i] == "numeric"){
what[,i] = as.numeric(what[,i])
}
else{
what[,i] = as.character(what[,i])
}
})
what
class(what)
what = as.data.frame(maybe)
what
class(what[,1])
out = sapply(1:ncol(what), function(i){
if(classes[i] == "numeric"){
what[,i] = as.numeric(what[,i])
}
else{
what[,i] = as.character(what[,i])
}
})
class(What[,1])
class(what[,1])
out = sapply(1:ncol(what), function(i){
if(classes[i] == "numeric"){
what[,i] <<- as.numeric(what[,i])
}
else{
what[,i] <<- as.character(what[,i])
}
})
class(what[,1])
class(what[,2])
class(what[,3])
classes[1]
tolower(classes[1])
out = sapply(1:ncol(what), function(i){
if(tolower(classes[i]) == "numeric"){
what[,i] <<- as.numeric(what[,i])
}
else{
what[,i] <<- as.character(what[,i])
}
})
class(out[,1])
class(out[,2])
class(out[,3])
class(out[,1])
class(what[,1])
class(what[,2])
class(what[,3])
class(what)
source.with.encoding('~/Baseball/getdat.R', encoding='UTF-8')
source.with.encoding('~/.active-rstudio-document', encoding='UTF-8')
year
pitching
league
first = getdat(xClass = "full_table",year,pitching, league)
first = getdat(xClass = "full_table",year,pitching, league)
second = getdat(xClass = "full_table non_qual",year,pitching,league)
first[,1]
first[,2]
first[,3]
first
dat = as.data.frame(matrix(nrow = (nrow(first) + nrow(second)), ncol = ncol(first)), stringsAsFactors = F)
dat
dat[1:nrow(first),] = first
dat[(nrow(first)+1):nrow(dat),] = second
dat
out = dat[order(dat[,1]),]
names(out) = dfName
out
head(out)
first
what[,1]
what[1,]
options
options()
if(pitching == T){
fileurl = paste("http://www.baseball-reference.com/leagues/",league, "/",year,"-standard-pitching.shtml",sep = "")
cols = c(1,3,5:35)
dfName = c("ID", "pName", "Age", "tName", "W", "L", "WL%", "ERA", "G", "GS", "GF", "CG", "SHO", "SV", "IP", "H", "R", "ER", "HR", "BB", "IBB", "SO", "HBP", "BK", "WP", "BF", "ERA+", "FIP", "WHIP", "H9", "HR9", "BB9", "SO9", "K/BB")
ec = 35
classes = c(rep(c("Numeric", "Character"), 2), rep("Numeric",30))
}
else{
fileurl = paste("http://www.baseball-reference.com/leagues/", league, "/",year,"-standard-batting.shtml",sep = "")
cols = c(1,3,5:28)
dfName = c("ID", "pName", "Age", "tName", "G", "PA", "AB", "R", "H", "2B", "3B", "HR", "RBI", "SB", "CS", "BB", "SO", "BA", "OBP", "SLG", "OPS", "OPS+", "TB", "GDP", "HBP", "SH", "SF", "IBB", "Pos")
ec = 29
classes = c(rep(c("Numeric", "Character"), 2), rep("Numeric",25))
}
doc = htmlTreeParse(fileurl,useInternal = TRUE)
string = paste("//tr[@class='",xClass,"']",sep = "")
dat = xpathSApply(doc, string, xmlValue)
almost = matrix(nrow = length(dat), ncol = ec)
almost = sapply(1:length(dat), function(i){
a = dat[i]
a1 = gsub("\n","",a)
a2 = strsplit(a1,"   ")
if(length(a2[[1]]) == (ec-1)){
a2[[1]][ec] = NA
}
a2[[1]][which(a2[[1]] == "")] = NA
a2[[1]][2] = gsub("Â", "",a2[[1]][2])
almost[i,] <<- unlist(a2)
invisible(a2)
})
maybe = matrix(unlist(almost), nrow = length(almost),byrow = T)
what = as.data.frame(maybe)
what
what[1,]
sapply(1:ncol(what), function(i){
if(tolower(classes[i]) == "numeric"){
what[,i] <<- as.numeric(what[,i])
}
else{
what[,i] <<- as.character(what[,i])
}
})
sapply(1:ncol(what), function(i){
if(tolower(classes[i]) == "numeric"){
what[,i] <<- as.numeric(what[,i])
}
else{
what[,i] <<- as.character(what[,i])
}
invisible(what)})
what
what[,1]
what[1,]
maybe = matrix(unlist(almost), nrow = length(almost),byrow = T)
what = as.data.frame(maybe)
colClasses()
Classes()
classes
classes()
class(what)
class(what[,1:ncol(what)])
what[,1]
what[1,]
as.numeric(what[1,3])
what = as.data.frame(maybe)
what = sapply(what[,1:col(what)], as.character)
maybe = matrix(unlist(almost), nrow = length(almost),byrow = T)
what = as.data.frame(maybe)
what[,1:ncol(what)] = sapply(what[,1:col(what)], as.character)
sapply(what[,1:ncol(what)], as.character)
what = sapply(what[,1:ncol(what)], as.character)
maybe = matrix(unlist(almost), nrow = length(almost),byrow = T)
what = as.data.frame(maybe)
what[,1:ncol(what)] = sapply(what[,1:ncol(what)], as.character)
what
sapply(1:ncol(what), function(i){
if(tolower(classes[i]) == "numeric"){
what[,i] <<- as.numeric(what[,i])
}
else{
what[,i] <<- as.character(what[,i])
}
})
classes
as.numeric("2")
cols = c(1,3,5:35)
what[,cols] = sapply(what[,cols],as.numeric)
what[,cols]
cols
cols = c(1,3,5:28)
maybe = matrix(unlist(almost), nrow = length(almost),byrow = T)
what = as.data.frame(maybe)
what[,1:ncol(what)] = sapply(what[,1:ncol(what)], as.character)
what[,cols] = sapply(what[,cols], as.numeric)
what
class(what[,2])
class(what[,1])
names(what) = dfName
what
getdat = function(xClass,year,pitching, league){
if(pitching == T){
fileurl = paste("http://www.baseball-reference.com/leagues/",league, "/",year,"-standard-pitching.shtml",sep = "")
cols = c(1,3,5:35)
dfName = c("ID", "pName", "Age", "tName", "W", "L", "WL%", "ERA", "G", "GS", "GF", "CG", "SHO", "SV", "IP", "H", "R", "ER", "HR", "BB", "IBB", "SO", "HBP", "BK", "WP", "BF", "ERA+", "FIP", "WHIP", "H9", "HR9", "BB9", "SO9", "K/BB")
ec = 35
classes = c(rep(c("Numeric", "Character"), 2), rep("Numeric",30))
}
else{
fileurl = paste("http://www.baseball-reference.com/leagues/", league, "/",year,"-standard-batting.shtml",sep = "")
cols = c(1,3,5:28)
dfName = c("ID", "pName", "Age", "tName", "G", "PA", "AB", "R", "H", "2B", "3B", "HR", "RBI", "SB", "CS", "BB", "SO", "BA", "OBP", "SLG", "OPS", "OPS+", "TB", "GDP", "HBP", "SH", "SF", "IBB", "Pos")
ec = 29
classes = c(rep(c("Numeric", "Character"), 2), rep("Numeric",25))
}
doc = htmlTreeParse(fileurl,useInternal = TRUE)
string = paste("//tr[@class='",xClass,"']",sep = "")
dat = xpathSApply(doc, string, xmlValue)
almost = matrix(nrow = length(dat), ncol = ec)
almost = sapply(1:length(dat), function(i){
a = dat[i]
a1 = gsub("\n","",a)
a2 = strsplit(a1,"   ")
if(length(a2[[1]]) == (ec-1)){
a2[[1]][ec] = NA
}
a2[[1]][which(a2[[1]] == "")] = NA
a2[[1]][2] = gsub("Â", "",a2[[1]][2])
almost[i,] <<- unlist(a2)
invisible(a2)
})
maybe = matrix(unlist(almost), nrow = length(almost),byrow = T)
what = as.data.frame(maybe)
what[,1:ncol(what)] = sapply(what[,1:ncol(what)], as.character)
what[,cols] = sapply(what[,cols], as.numeric)
names(what) = dfName
return(what)
}
first = getdat(xClass = "full_table",year,pitching, league)
first
class(first[,1])
class(first[,2])
second = getdat(xClass = "full_table non_qual",year,pitching,league)
dat = as.data.frame(matrix(nrow = (nrow(first) + nrow(second)), ncol = ncol(first)), stringsAsFactors = F)
dat[1:nrow(first),] = first
dat[(nrow(first)+1):nrow(dat),] = second
dat
dat[1,]
class(dat[,1])
class(dat[,2])
class(dat[,3])
class(dat[,4])
out = dat[order(dat[,1]),]
out
out[,1]
length(out[,1]
)
out[76,]
out[77,]
out[75,]
out[74,]
length(which(out[,4] == "TOT"))
which(out[,4] == "TOT")
out[,1]
length(out[,1])
length(which(out[,4] == "TOT"))
getComplete = function(league, pitching, year){
source("getdat.R")
if(pitching == T){
dfName = c("ID", "pName", "Age", "tName", "W", "L", "WL%", "ERA", "G", "GS", "GF", "CG", "SHO", "SV", "IP", "H", "R", "ER", "HR", "BB", "IBB", "SO", "HBP", "BK", "WP", "BF", "ERA+", "FIP", "WHIP", "H9", "HR9", "BB9", "SO9", "K/BB")
classes = c(rep(c("Numeric", "Character"), 2), rep("Numeric",30))
}
else{
dfName = c("ID", "pName", "Age", "tName", "G", "PA", "AB", "R", "H", "2B", "3B", "HR", "RBI", "SB", "CS", "BB", "SO", "BA", "OBP", "SLG", "OPS", "OPS+", "TB", "GDP", "HBP", "SH", "SF", "IBB", "Pos")
classes = c(rep(c("Numeric", "Character"), 2), rep("Numeric",25))
}
first = getdat(xClass = "full_table",year,pitching, league)
second = getdat(xClass = "full_table non_qual",year,pitching,league)
dat = as.data.frame(matrix(nrow = (nrow(first) + nrow(second)), ncol = ncol(first)), stringsAsFactors = F)
dat[1:nrow(first),] = first
dat[(nrow(first)+1):nrow(dat),] = second
out = dat[order(dat[,1]),]
out[,1] = 1:nrow(out[,1])
names(out) = dfName
return(out)
}
getComplete("AL",F,2014)
1:length(out[,1])
source('~/Baseball/getComplete.R')
getComplete("AL",F,2014)
y = getComplete("AL",F,2014)
head(y)
source.with.encoding('~/Baseball/getComplete.R', encoding='UTF-8')
y = getComplete("AL",F,2014)
head(y)
gsub("Â", "", u$pName)
gsub("Â", "", y$pName)
source.with.encoding('~/Baseball/getComplete.R', encoding='UTF-8')
y = getComplete("AL",F,2014)
head(y)
class(y[,2])
class(y[,1])
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
h5createFile("example.h5")
install.packages("httr")
library(httr)
GET("https://mail.google.com/mail/u/0/#inbox")
html2 = GET("https://mail.google.com/mail/u/0/#inbox")
content(html2, as = "text")
html2 = GET("https://mail.google.com/mail/u/0/#inbox", authenticate("jrbyrnes1989","ilo1327rww"))
html2
content(html2, as = "text")
names(html2)
html2$content
oauth_app("facebook", "1525496354363192", "7edd681ed9a685c23ffb3ab1ad4f6fde")
myapp = oauth_app("facebook", "1525496354363192", "7edd681ed9a685c23ffb3ab1ad4f6fde")
sign_oauth1.0(myapp)
sig = sign_oauth1.0(myapp)
GET("https://www.facebook.com/")
GET("https://www.facebook.com/", sig)
homeTL = GET("https://www.facebook.com/", sig)
content(homeTL)
jsonlite::fromJSON(toJSON(content(homeTL)))
library(jsonlite)
jsonlite::fromJSON(toJSON(content(homeTL)))
close(url)
token = e94999e7a34410af66e1dd60280406558977ac6a
token = "e94999e7a34410af66e1dd60280406558977ac6a"
myapp = oauth_app("github", "96ab1e64fdbdd59c54d6", "9d79002781158b5635006bb7d7a4f39f8e389bd0")
sigh_oauth1.0(myapp)
sign_oauth1.0(myapp)
sig = sign_oauth1.0(myapp)
homeTL = GET("https://api.github.com/users/jtleek/repos",sig)
homeTL
sig = sign_oauth1.0(myapp, toke = "a31ebacb6d7039bfaaad4ca09d53253e17627ef2")
sig = sign_oauth1.0(myapp, token = "a31ebacb6d7039bfaaad4ca09d53253e17627ef2")
homeTL = GET("https://api.github.com/users/jtleek/repos",sig)
homeTL
client_id = '96ab1e64fdbdd59c54d6'
client_id = '96ab1e64fdbdd59c54d6'
client_secret = '9d79002781158b5635006bb7d7a4f39f8e389bd0'
authorization_base_url = 'https://github.com/login/oauth/authorize'
token_url = 'https://github.com/login/oauth/access_token'
from requests_oauthlib import OAuth2Session
github = OAuth2Session(client_id)
authorization_url, state = github.authorization_url(authorization_base_url)
print 'Please go here and authorize,', authorization_url
oauth_endpoints("github")
oauth_app("github", "b0956f626a20c5202533", "7dbedf26f98dd97c094352e2e5b8fc3a29bea659")
myapp <- oauth_app("github", "b0956f626a20c5202533", "7dbedf26f98dd97c094352e2e5b8fc3a29bea659")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
#Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
install.packages("httpuv")
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
#Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
req
json1 <- content(req)
json1
length(json1)
jsonlite::fromJSON(toJSON(json1))
mat = jsonlite::fromJSON(toJSON(json1))
names(mat)
mat$name
mat[5,]
install.packages("sqldf")
library(sqldf)
install(Rtools)
intstall.packages("Rtools")
install.packages("Rtools")
version()
RVersion()
R.Version()
library(Rtools)
install.packages(Rtools)
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL", type = "source")
library(RMySQL)
install.packages("RMySQL",type = "source")
library(RMySQL)
install.packages("sqldf")
library(sqldf)
dbConnect(MySQL(), host = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv ")
readLines("http://biostat.jhsph.edu/~jleek/contact.html ")
file = readLines("http://biostat.jhsph.edu/~jleek/contact.html ")
nchar(file[100])
nchar(file[10])
nchar(file[20])
nchar(file[30])
nchar(file[100])
read.fwf()
x <- read.fwf(
file=url("http://www.cpc.ncep.noaa.gov/data/indices/wksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
x
sum(x[,4])
ncol(x)
head(x)
x$V4
sum(x$V4)
sum(x[,1])
sum(x[,2])
sum(x[,3])
sum(x[,4])
sum(x[,5])
sum(x[,6])
sum(x[,7])
sum(x[,8])
sum(x[,9])
x <- read.fwf(
file=url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
x
sum(x[,4])
300/40
250/35
60000/1200
800/20
300/20
480/60
480/30
120/1.5
/40
40/0.5
480/30
20/800
1200/60000
